class RandomizedSet {
public:
    /** Initialize your data structure here. */
    vector<int> v;
    
    map<int, int> m;
    
    RandomizedSet() {
        srand(time(nullptr));
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    bool insert(int val) 
    {
        
        if(m.count(val))
            return false;
        
       int index = v.size(); 
        v.push_back(val); 
              
        // and hashmap also 
        m[val] = index;
        // m.insert(std::pair<int,int>(val, index)); 
        return true;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    bool remove(int val) 
    {
        
        if(!m.count(val))
            return false;
        
        int idx = m[val];
        int last = v.back();
        if(last!=val)
        {
            v[idx] = last;
            m[last] = idx;
        }
        m.erase(val);
        v.pop_back();
        return true;
    }
    
    /** Get a random element from the set. */
    int getRandom() 
    {
        int random_idx = rand() % v.size();
        return v[random_idx];
        // return v[rand()%v.size()];
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
