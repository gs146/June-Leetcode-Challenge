class Solution {
public:
    
    void flood_fill(vector<vector<char>>& board, int x, int y, char prev1,char new1, int m, int n)
    {
        if(x<0 || x>=m || y<0 ||y>=n)
            return;
        if(board[x][y]!=prev1)
            return;
        
        board[x][y] = new1;
        
        //all four directions
        flood_fill(board,x+1, y, prev1, new1,m,n);
        flood_fill(board,x-1, y, prev1, new1,m,n);
        flood_fill(board,x, y+1, prev1, new1,m,n);
        flood_fill(board,x, y-1, prev1, new1,m,n);
        
    }
    void replace_edges(vector<vector<char>>& board)
    {
        
        int m = board.size();
        int n = board[0].size();
        
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++)
                if(board[i][j]=='O')
                    board[i][j]='-';
            
            for(int i=0;i<m;i++)
                if(board[i][0]=='-')
                    flood_fill(board, i, 0, '-', 'O',m,n);
            
            for(int i=0;i<n;i++)
                if(board[0][i]=='-')
                    flood_fill(board, 0, i, '-', 'O',m,n);
            
            for(int i=0;i<m;i++)
                if(board[i][n-1]=='-')
                    flood_fill(board, i, n-1, '-', 'O',m,n);
            
            for(int i=0;i<n;i++)
                if(board[m-1][i]=='-')
                    flood_fill(board, m-1, i, '-', 'O',m,n);
            
            for(int i=0;i<m;i++)
                for(int j=0;j<n;j++)
                    if(board[i][j]=='-')
                        board[i][j] = 'X';
        
    }
    void solve(vector<vector<char>>& board) 
    {
        if(board.size()==0)
            return;
        replace_edges(board);
        
    }
};
